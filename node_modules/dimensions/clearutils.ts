import Client from "dimensions/client";
import PacketWriter from "dimensions/packets/packetwriter";
import PacketTypes from "dimensions/packettypes";
import * as _ from "lodash";

class ClearUtils {
  public static clearPlayers(client: Client): void {
    const playerIDs: string[] = _.keys(client.server.entityTracking.players);
    for (var i = 0, len = playerIDs.length; i < len; i++) {
      if (parseInt(playerIDs[i]) === client.player.id)
        continue;

      ClearUtils.clearPlayer(client, parseInt(playerIDs[i]));
    }
  }

  public static clearPlayer(client: Client, playerIndex: number): void {
    const playerActive = new PacketWriter()
      .setType(PacketTypes.PlayerActive)
      .packByte(playerIndex)
      .packByte(0) // Active
      .data;
    client.socket.write(playerActive);
  }

  public static clearNPCs(client: Client): void {
    const npcIDs: string[] = _.keys(client.server.entityTracking.NPCs);
    for (let i: number = 0, len = npcIDs.length; i < len; i++) {
      if (client.server.entityTracking.NPCs[npcIDs[i]]) {
        ClearUtils.clearNPC(client, parseInt(npcIDs[i]));
      }
    }
  }

  public static clearNPC(client: Client, npcIndex: number): void {
    const updateNPC = new PacketWriter()
      .setType(PacketTypes.NPCUpdate)
      .packInt16(npcIndex)
      .packSingle(0) // PositionX
      .packSingle(0) // PositionY
      .packSingle(0) // VelocityX
      .packSingle(0) // VelocityY
      .packByte(0) // Target
      .packByte(0) // Unknown
      .packByte(0) // Flags
      .packInt16(0) // NPC NetID
      .packByte(4) // Life ByteSize
      .packInt32(0) // Life
      .packByte(0)
      .data;
    client.socket.write(updateNPC);
    client.server.entityTracking.NPCs[npcIndex] = undefined;
  }

  public static clearItems(client: Client): void {
    const itemIDs: string[] = _.keys(client.server.entityTracking.items);
    for (let i: number = 0, len = itemIDs.length; i < len; i++) {
      if (client.server.entityTracking.items[itemIDs[i]]) {
        ClearUtils.clearItem(client, parseInt(itemIDs[i]));
      }
    }
  }

  public static clearItem(client: Client, itemIndex: number): void {
    const updateItemDrop = new PacketWriter()
      .setType(PacketTypes.UpdateItemDrop)
      .packInt16(itemIndex)
      .packSingle(0) // PositionX
      .packSingle(0) // PositionY
      .packSingle(0) // VelocityX
      .packSingle(0) // VelocityY
      .packInt16(0) // Stacks
      .packByte(0) // Prefix
      .packByte(0) // NoDelay
      .packInt16(0)
      .data;
    client.socket.write(updateItemDrop);
  }
}

export default ClearUtils;
