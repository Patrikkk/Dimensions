import PacketReader from "dimensions/packetsold/packetreader";
import PacketWriter from "dimensions/packetsold/packetwriter";
import BPacketReader from "dimensions/packets/packetreader";
import BPacketWriter from "dimensions/packets/packetwriter";

function testWrite() {
    const time = process.hrtime();
    for (let i = 0; i < 100000; i++) {
        const pw = new PacketWriter()
            .setType(4)
            .packByte(1)
            .packByte(5)
            .packByte(5)
            .packString("HI")
            .packByte(5)
            .packByte(10)
            .packByte(10)
            .packByte(15)
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packByte(1)
            .data;

    }

    return process.hrtime(time);
}

function testBufWrite() {
    const time = process.hrtime();
    for (let i = 0; i < 100000; i++) {
        const pw = new BPacketWriter()
            .setType(4)
            .packByte(1)
            .packByte(5)
            .packByte(5)
            .packString("HI")
            .packByte(5)
            .packByte(10)
            .packByte(10)
            .packByte(15)
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packColor({
                R: 0,
                G: 0,
                B: 0
            })
            .packByte(1)
            .data;

    }

    return process.hrtime(time);
}

function testRead(data: Buffer) {
    const time = process.hrtime();
    for (let i = 0; i < 100000; i++) {
        const pw = new PacketReader(data.toString("hex"));
        pw.readByte();
        pw.readByte();
        pw.readByte();
        pw.readString();
        pw.readByte();
        pw.readByte();
        pw.readByte();
        pw.readByte();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readByte();

    }

    return process.hrtime(time);
}

function testBufRead(data: Buffer) {
    const time = process.hrtime();
    for (let i = 0; i < 100000; i++) {
        const pw = new BPacketReader(data);
        pw.readByte();
        pw.readByte();
        pw.readByte();
        pw.readString();
        pw.readByte();
        pw.readByte();
        pw.readByte();
        pw.readByte();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readColor();
        pw.readByte();

    }

    return process.hrtime(time);
}

const packet = new Buffer(new PacketWriter()
    .setType(4)
    .packByte(1)
    .packByte(5)
    .packByte(5)
    .packString("HI")
    .packByte(5)
    .packByte(10)
    .packByte(10)
    .packByte(15)
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packColor({
        R: 0,
        G: 0,
        B: 0
    })
    .packByte(1)
    .data, "hex");
console.log(testWrite());
console.log(testBufWrite());
console.log(testRead(packet));
console.log(testBufRead(packet));